{"version":3,"sources":["components/SphereItem.jsx","components/Sphere.jsx","components/App.js","index.js"],"names":["SphereItem","min","max","Math","ceil","floor","random","top","this","getRandomInt","left","props","filled","tooltip","title","link","animated","coord","getCoord","className","cn","style","active","target","href","React","PureComponent","Sphere","handleCount","e","value","state","items","countPoint","countTooltip","name","length","setState","round","handleOnFocus","handleOnBlur","data","map","item","i","key","onBlur","onFocus","type","onChange","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26782658.chunk.js","sourcesContent":["import React from 'react';\r\nimport cn from 'classnames';\r\n\r\nclass SphereItem extends React.PureComponent {\r\n    \r\n    getRandomInt(min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    getCoord() {\r\n        const top = this.getRandomInt(1, 99);\r\n        let left = this.getRandomInt(1, 99);\r\n\r\n        if( (top > 0 && top <= 5) || (top > 95)) {\r\n            left = this.getRandomInt(45, 55);\r\n        }\r\n        if( (top > 5 && top <= 10) || (top > 90 && top <= 95)) {\r\n            left = this.getRandomInt(30, 69);\r\n        }\r\n        if( (top > 10 && top <= 15) || (top > 85 && top <= 90)) {\r\n            left = this.getRandomInt(21, 77);\r\n        }\r\n        if( (top > 15 && top <= 20) || (top > 80 && top <= 85)) {\r\n            left = this.getRandomInt(15, 84);\r\n        }\r\n        if( (top > 20 && top <= 25) || (top > 75 && top <= 80)) {\r\n            left = this.getRandomInt(10, 88);\r\n        }\r\n        if( (top > 25 && top <= 30) || (top > 70 && top <= 75)) {\r\n            left = this.getRandomInt(7, 92);\r\n        }\r\n        if( (top > 30 && top <= 35) || (top > 65 && top <= 70)) {\r\n            left = this.getRandomInt(4, 94);\r\n        }\r\n        if( (top > 35 && top <= 40) || (top > 60 && top <= 65)) {\r\n            left = this.getRandomInt(3, 96);\r\n        }\r\n        if( (top > 40 && top <= 45) || (top > 55 && top <= 60)) {\r\n            left = this.getRandomInt(1, 98);\r\n        }\r\n\r\n        return {\r\n            left: `${left}%`,\r\n            top: `${top}%`\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { filled, tooltip, title, link, animated } = this.props;\r\n        const coord = this.getCoord();\r\n\r\n        return (\r\n            <>\r\n                <div\r\n                    className={cn({\r\n                        'sphere__item': true,\r\n                        filled\r\n                    })}\r\n                    style={coord}\r\n                ></div>\r\n                <div className={\r\n                    cn({\r\n                        \"sphere__tooltip\": true,\r\n                        active: animated\r\n                    })\r\n                    } style={coord}\r\n                >\r\n                    {\r\n                        tooltip &&\r\n                        <a target=\"_blank\" href={link} className=\"sphere__link\">{ title }</a>\r\n                    }\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SphereItem;","import React from 'react';\r\nimport cn from 'classnames';\r\n\r\nimport SphereItem from './SphereItem';\r\n\r\nimport './Sphere.css'\r\nimport data from '../data.json';\r\n\r\nclass Sphere extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          items: [],\r\n          countPoint: 400,\r\n          countTooltip: 5,\r\n          animated: true\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n          items: data.items\r\n        })\r\n    }\r\n\r\n    handleCount = (e) => {\r\n        let value = +e.target.value;\r\n        const { items, countPoint, countTooltip } = this.state;\r\n        if(value < 1) {\r\n            value = 1;\r\n        }\r\n        if(e.target.name === 'countPoint' && value > items.length + 1) {\r\n            value = items.length + 1\r\n        }\r\n        if(e.target.name === 'countTooltip' && value > countPoint) {\r\n            value = countPoint\r\n        }\r\n        if(e.target.name === 'countPoint' && value <= countTooltip) {\r\n            this.setState({\r\n                countPoint: Math.round(value),\r\n                countTooltip: Math.round(value),\r\n                animated: true\r\n            });\r\n        } else {\r\n            this.setState({\r\n                [e.target.name]: Math.round(value),\r\n                animated: true\r\n            });\r\n        }\r\n    }\r\n\r\n    handleOnFocus = () => {\r\n        this.setState({\r\n            animated: false\r\n        })\r\n    }\r\n\r\n    handleOnBlur = () => {\r\n        this.setState({\r\n            animated:true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { items, countPoint, countTooltip, animated } = this.state;\r\n        \r\n        return (\r\n            <div className=\"sphere\">\r\n                <div\r\n                    className={\r\n                        cn({\r\n                            \"sphere__list\": true,\r\n                            active: animated\r\n                        })\r\n                    }\r\n                >\r\n                    {\r\n                        items.map((item, i) => {\r\n                            return (\r\n                                i < countPoint &&\r\n                                <SphereItem\r\n                                    key={`${item.link}${item.filled}`}\r\n                                    title={item.title}\r\n                                    link={item.link}\r\n                                    filled={item.filled}\r\n                                    tooltip={i < countTooltip}\r\n                                    animated={animated}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                </div>\r\n                <label className=\"sphere__label-point\">\r\n                    <span className=\"sphere__label-text\">Count Point</span>\r\n                    <input onBlur={this.handleOnBlur} onFocus={this.handleOnFocus} type=\"number\" name=\"countPoint\" value={countPoint} onChange={this.handleCount}/>\r\n                </label>\r\n                <label className=\"sphere__label-tooltip\">\r\n                    <span className=\"sphere__label-text\">Count Tooltip</span>\r\n                    <input onBlur={this.handleOnBlur} onFocus={this.handleOnFocus} type=\"number\" name=\"countTooltip\" value={countTooltip} onChange={this.handleCount}/>\r\n                </label>\r\n            </div>\r\n        );\r\n    }  \r\n}\r\n\r\nexport default Sphere;","import React from 'react';\n\nimport Sphere from './Sphere';\n\nfunction App() {\n    return (\n      <Sphere />\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}